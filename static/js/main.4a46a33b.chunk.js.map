{"version":3,"sources":["components/navbar/styles.ts","components/navbar/Navbar.tsx","services/TodoService.tsx","contexts/TodoContext.tsx","components/general/styles.ts","components/TodoListItem.tsx","components/todo-list/TodoList.tsx","components/AddTodo.tsx","components/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["General","styled","div","NavbarTitle","a","NavbarTitleSecondary","span","Navbar","className","src","width","height","style","margin","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","TODO_STORE","get","data","localStorage","getItem","JSON","parse","TodoContext","createContext","todos","addTodo","removeTodo","toggle","TodoProvider","props","useState","setTodos","useEffect","length","setItem","stringify","Provider","value","title","todo","done","index","indexOf","filter","_","i","children","ContainerCenter","Card","CircleIcon","Title","h1","TodoListItem","useContext","checked","onChange","event","onClick","TodoList","map","schema","yup","shape","required","AddTodo","useForm","resolver","yupResolver","register","handleSubmit","errors","onSubmit","e","target","reset","window","location","fontSize","marginTop","name","placeholder","ref","message","App","basename","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4a46a33b.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const General = styled.div`\r\n    background-color: white;\r\n    font-family: 'Poppins', sans-serif;\r\n    box-shadow: 0 0.125rem 0.25rem rgb(0 0 0 / 5%);\r\n`;\r\n\r\nexport const NavbarTitle = styled.a`\r\n    color: #252930;\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const NavbarTitleSecondary = styled.span`\r\n    font-size: 1.5rem;\r\n    color: #252930;    \r\n    font-weight: 300;\r\n`;\r\n\r\n// <a className=\"navbar-brand\" href=\"#\">Todo App</a>\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { General, NavbarTitle, NavbarTitleSecondary } from './styles';\r\n\r\nconst Navbar = () => {\r\n    return(        \r\n         <>\r\n             <General>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <img src={\"./home-icon.png\"} width=\"40\" height=\"40\" style={{margin: 10}}></img>\r\n                {/* <a className=\"navbar-brand\" href=\"#\">Todo App</a> */}\r\n                <NavbarTitle className=\"navbar-brand\" href=\"#\">Todo<NavbarTitleSecondary>App</NavbarTitleSecondary></NavbarTitle>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarText\">                    \r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item active\">\r\n                            <Link className=\"nav-link\" to=\"/\">In√≠cio <span className=\"sr-only\">(current)</span></Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/create\" className=\"nav-link\">Nova Tarefa</Link>                            \r\n                        </li>                        \r\n                    </ul>\r\n                    <span className=\"navbar-text\">                                \r\n                        <Link to=\"/\" className=\"nav-link\">Sair <i className=\"fas fa-power-off\"></i></Link>                                                \r\n                    </span>\r\n                </div>\r\n            </nav>  \r\n            </General>      \r\n         </>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import { Todo } from \"../models/Todo\";\r\n\r\nconst TODO_STORE = 'todos';\r\n\r\nexport const get = (): Todo[] => {\r\n    const data = localStorage.getItem(TODO_STORE) || '';\r\n    try {\r\n        const result = JSON.parse(data) as Todo[];\r\n        return result;\r\n    } catch {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport const save = (data: Todo[]) => {\r\n    if (data?.length >= 1)\r\n        localStorage.setItem(TODO_STORE, JSON.stringify(data));\r\n}","import React, { createContext, useState, useEffect } from 'react';\r\nimport { TodoContextType } from './TodoContextType';\r\nimport { Todo } from '../models/Todo';\r\nimport { get, save } from '../services/TodoService';\r\n\r\nexport const TodoContext = createContext<TodoContextType>({\r\n    todos: [],\r\n    addTodo: () => { },\r\n    removeTodo: () => { },\r\n    toggle: () => { },\r\n});\r\n\r\nconst TodoProvider = (props: any) => {\r\n    const [todos, setTodos] = useState<Todo[]>(get);\r\n\r\n    useEffect(() => {\r\n        save(todos);\r\n    }, [todos]);\r\n\r\n    const addTodo = (title: string) => {\r\n        const todo: Todo = { id: todos.length + 1, title: title, done: false };\r\n        setTodos([...todos, todo]);\r\n    }\r\n\r\n    const removeTodo = (todo: Todo) => {\r\n        const index = todos.indexOf(todo);\r\n        setTodos(todos.filter((_, i) => i !== index));\r\n    }\r\n\r\n    const toggle = (todo: Todo) => {\r\n        const index = todos.indexOf(todo);\r\n        todos[index].done = !todo.done;\r\n        setTodos([...todos]);\r\n    }\r\n\r\n    return (\r\n        <TodoContext.Provider value={{ todos, addTodo, removeTodo, toggle }}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    );\r\n}\r\n\r\nexport default TodoProvider;","import styled from 'styled-components'\r\n\r\nexport const ContainerCenter = styled.div`\r\n    height: 100%;\r\n    /* border: 1px solid red; */\r\n    display: flex;\r\n    /* flex-flow: row nowrap; */\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\n\r\nexport const Card = styled.div`    \r\n    width: auto;\r\n    min-width: 300px;\r\n    margin: 15px;\r\n    min-height: 300px;\r\n    height: auto;\r\n    \r\n    padding: 1.5rem;\r\n    box-shadow: 0 0.125rem 0.25rem rgb(0 0 0 / 15%);\r\n    border: 1px solid #f5f6fe;    \r\n    background: #fff;\r\n`;\r\n\r\nexport const CircleIcon = styled.div`\r\n    color: #74cade;\r\n    width: 60px;\r\n    height: 60px;\r\n    background: #f5f6fe;\r\n    display: inline-block;\r\n    border-radius: 50%;\r\n    padding-top: 15px;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    color: #252930;\r\n    font-size: 1.3rem;\r\n    font-weight: bold;\r\n`;","import React, { useContext } from 'react'\r\nimport { TodoContext } from '../contexts/TodoContext';\r\nimport { TodoContextType } from '../contexts/TodoContextType';\r\nimport { Todo } from '../models/Todo';\r\n\r\ninterface TodoListItemProps {\r\n    todo: Todo\r\n}\r\n\r\nconst TodoListItem = (props: TodoListItemProps) => {   \r\n    const {removeTodo, toggle} = useContext<TodoContextType>(TodoContext)\r\n\r\n    const onRemove = (todo: Todo) => {\r\n        removeTodo(todo)\r\n    }\r\n\r\n    const handleChange = (event: any) => {\r\n        toggle(props.todo)\r\n    }\r\n\r\n    return(\r\n        <tr>\r\n            <td>\r\n                <label>\r\n                    <input type=\"checkbox\" checked={props.todo.done} onChange={handleChange}/>\r\n                </label>\r\n            </td>\r\n            <td>{props.todo.title}</td>\r\n            <td>\r\n                {/* <button className=\"btn btn-danger\" onClick={() => onRemove(props.todo)}>Remover</button> */}\r\n                <a href=\"#\"><i className=\"fas fa-trash-alt text-danger\"  onClick={() => onRemove(props.todo)}></i></a>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TodoListItem\r\n","import React, { useContext } from 'react'\r\nimport { TodoContext } from '../../contexts/TodoContext';\r\nimport { TodoContextType } from '../../contexts/TodoContextType';\r\nimport { ContainerCenter, Card } from '../general/styles';\r\nimport TodoListItem from '../TodoListItem';\r\n\r\n\r\nconst TodoList = () => {\r\n    const { todos } = useContext<TodoContextType>(TodoContext)\r\n\r\n    return(\r\n        <ContainerCenter>\r\n            <Card>\r\n                <table className=\"table\">\r\n                    {/* <caption>Lista de tarefas</caption> */}\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Status</th>\r\n                            <th>Descri√ß√£o</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            todos?.map(\r\n                                todo => (<TodoListItem key={todo.id} todo={todo}></TodoListItem>)\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </Card>\r\n        </ContainerCenter>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useContext} from 'react'\r\nimport { TodoContext } from '../contexts/TodoContext'\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { TodoContextType } from '../contexts/TodoContextType';\r\nimport { Card, ContainerCenter, CircleIcon, Title } from './general/styles';\r\n\r\n\r\nconst schema = yup.object().shape({\r\n    title: yup.string().required('Tarefa inv√°lida'),\r\n})\r\n\r\ninterface AddTodoForm {\r\n    title: string\r\n}\r\n\r\nconst AddTodo = () => {\r\n    const { addTodo } = useContext<TodoContextType>(TodoContext)\r\n    const { register, handleSubmit, errors } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = (data: AddTodoForm, e: any) => {\r\n        addTodo(data.title)\r\n        e.target.reset()\r\n        window.location.href = '/todo-react'\r\n    }\r\n\r\n    return (\r\n        <ContainerCenter>\r\n            <Card>\r\n                <form onSubmit={handleSubmit<AddTodoForm>(onSubmit)}>                    \r\n                    {/* <h4 style={{color: '#74cade'}}>Nova tarefa</h4> */}\r\n                    <CircleIcon className=\"text-center\">                        \r\n                    <i className=\"fas fa-book\" style={{fontSize: 30}}></i>\r\n                    </CircleIcon>\r\n                    <Title style={{marginTop: 5}}>Nova tarefa</Title>  \r\n                    <br />                 \r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" name=\"title\" id=\"title\" placeholder=\"descri√ß√£o...\" className=\"form-control\" ref={register} />\r\n                        <span><small><strong className=\"text-danger\">{errors.title?.message}</strong></small></span>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <button type=\"submit\" className=\"btn btn-primary\" style={{marginTop: 25}}>Salvar</button>\r\n                    </div>\r\n                </form>\r\n            </Card>\r\n        </ContainerCenter>\r\n    )\r\n}\r\n\r\nexport default AddTodo","import React from 'react';\r\nimport Navbar from './navbar/Navbar';\r\nimport TodoList from './todo-list/TodoList';\r\nimport TodoContext from '../contexts/TodoContext';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport AddTodo from './AddTodo';\r\n\r\nconst App = () => {\r\n    return (\r\n        <TodoContext>\r\n            <Router basename=\"/todo-react\">\r\n                <Navbar></Navbar>\r\n                <br />\r\n                <div className=\"container-fluid\">\r\n                    <Switch>\r\n                        <Route path=\"/create\">\r\n                            <AddTodo></AddTodo>\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            {/* <h4 className=\"text-center\">Minha lista de tarefas</h4> */}\r\n                            <TodoList></TodoList>\r\n                        </Route> \r\n                    </Switch>        \r\n                </div>  \r\n            </Router>\r\n        </TodoContext>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}